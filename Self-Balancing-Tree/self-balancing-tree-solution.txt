   /* Class node is defined as :
    class Node 
       int val;   //Value
       int ht;      //Height
       Node left;   //Left child
       Node right;   //Right child

   */

// mozna dochodzac do nowego wezla, odstawiac sciezke do kolejki, pozniej isc w gore drzewa (po kolejce) i sprawdzac czy balance factor jest w zakresie, jak nie, to balansowac
   static Node insert(Node root,int val)
    {
      if(root == null){
        Node onlyOneElement = new Node();
        onlyOneElement.val = val;
        return onlyOneElement;   
    }
    
       
        Node newRoot = root;
        Node insertThis = new Node();
        insertThis.val = val;
        Node prev=null;
    
          while(root != null){
              prev = root;
              if(val <= root.val){
                  root = root.left;
              }
              else{
                  root = root.right;
              }
                  
          }
          if(val > prev.val){
              prev.right = insertThis;
              insertThis.ht = prev.ht + 1;
          }else{
              prev.left = insertThis;
              insertThis.ht = prev.ht + 1;
          }
              
          preOrder(newRoot);
     levelOrder(newRoot);
      return newRoot;
    }

static void preOrder(Node root) {
    
    balance(root);
   // System.out.print(" " + root.val + " ");
    System.out.println();
    if(root.left != null){
        preOrder(root.left);
    }
    if(root.right != null){
        preOrder(root.right);
    }
    
    
}

// to jest zle
static void balance(Node root){
     int leftH = (root.left == null) ? 0: root.left.ht ;
     int rightH = (root.right == null) ? 0: root.right.ht ;
  //  System.out.print(leftH - rightH);
    
    if (leftH - rightH > 1){ //balansuj w lewo
        Node temp = root;
        root = root.left;
        temp.left = root.right;
        root.right = temp;
    
    }else if (leftH - rightH  < -1){ // balansuj w prawo
        Node temp = root;
        root = root.right;
        temp.right = root.left;
        root.left = temp;
    }
}

static void levelOrder(Node root) {
     
     Queue<Node> queue = new LinkedList<Node>();
     System.out.print( root.val + " ");
     int ht = 0;
     while(queue.peek() != null || root != null){

             if(root.left != null){
                 queue.add(root.left);
             }
             if(root.right != null){
                 queue.add(root.right);
             }
             
             root = queue.poll();
             System.out.print( root.val + " ");
         
     }
       
    
      
    }
